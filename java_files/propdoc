#!/usr/bin/env python3
import json
from argparse import ArgumentParser, Namespace
from pathlib import Path
from typing import Iterable


def cli() -> Namespace:
    parser = ArgumentParser(
        description="Generates HTML file with configuration documentation based on spring-configuration-metadata.json"
    )
    parser.add_argument("html", type=Path)
    return parser.parse_args()


def load_properties(files: list[Path]) -> Iterable[dict]:
    for file in files:
        with file.open("r", encoding="utf8") as fp:
            for prop in json.load(fp).get("properties", []):
                yield prop


def convert_html(files: list[Path]) -> str:
    doc = [
        """<!DOCTYPE html>
           <html>
           <head>
                <meta charset="utf-8" />
                <title>Settings documentation</title>
                <style>
                    html {
                        color: #1a1a1a;
                        background-color: #fdfdfd;
                    }
                    a {
                        color: #1f75cb;
                        background-color: #e9f3fc;
                    }
                    code {
                        padding: 2px 4px;
                        color: #1f1e24;
                        background-color: #ececef;
                        border-radius: 4px;
                    }
                    dt {
                        font-size: 1.3rem;
                    }
                    dd {
                        padding-top: 1rem;
                        padding-bottom: 1rem;
                    }
                </style>
           </head>
           <body>
           <h1>Settings documentation</h1>
           <dl>
        """,
    ]
    for prop in load_properties(files):
        doc.append(
            f"<dt><code>{prop['name']}</code></dt><dd>{prop.get('description', 'Missing documentation')}</dd>\n"
        )
        doc.append("</dl></body></html>")
    return "\n".join(doc)


def main():
    args = cli()
    files = list(Path.cwd().rglob("**/spring-configuration-metadata.json"))
    if not files:
        return
    html_code = convert_html(files)
    with args.html.open("w", encoding="utf8") as fp:
        fp.write(html_code)

if __name__ == "__main__":
    main()
