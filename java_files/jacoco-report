#!/usr/bin/env python3
from __future__ import annotations
import xml.etree.ElementTree as ET
import shutil
import sys
from argparse import ArgumentParser, Namespace
from collections import defaultdict
import json

COV_METRICS = ['branch', 'class', 'complexity', 'instruction', 'line', 'method']
METRICS_TRANS = {
    'branch': 'Branches',
    'class': 'Classes',
    'complexity': 'Cyclomatic complexity',
    'instruction': 'Instructions',
    'line': 'Lines',
    'method': 'Methods',
}

MESSAGES_MIN = {
    'branch': 'Number of non-covered branches {actual} is bigger, than required minimum {required}.',
    'class': 'Number of non-covered classes {actual} jest bigger, than required minimum {required}.',
    'complexity': 'Number of missing tests required to cover all paths {actual} is bigger, than required minimum {required}.',
    'instruction': 'Number of non-covered instructions {actual} is bigger, than required minimum {required}.',
    'line': 'Number of non-covered lines {actual} is bigger, than required minimum {required}.',
    'method': 'Number of non-covered methods {actual} is bigger, than required minimum {required}.',
}

MESSAGES_COV = {
    'branch': 'Coverage of branches {actual}% is less, than required level {required}%.',
    'class': 'Coverage of classes {actual}% is less, than required level {required}%.',
    'complexity': 'Coverage of all paths of execution {actual}% is less, than required level {required}%.',
    'instruction': 'Coverage of all instructions {actual}% is less, than required level {required}%.',
    'line': 'Coverage of the lines {actual}% is less, than required level {required}%.',
    'method': 'Coverage of the methods {actual}% is less, than required level {required}%.',
}


def cli() -> Namespace:
    parser = ArgumentParser(description='Tools to work with jacoco reports.')
    subparsers = parser.add_subparsers(
        title='subcommands', dest='command', required=True
    )

    merge_parser = subparsers.add_parser(
        'merge', help='Merges files with reports in jacoco.xml format.'
    )
    merge_parser.add_argument('files', nargs='+', help='Pliki jacoco.xml z raportami')
    merge_parser.add_argument(
        '-o', '--out', help='File to save the result of the merge to'
    )

    stats_parser = subparsers.add_parser('stats', help='Prints report statistics')
    stats_parser.add_argument('file', help='File with report')
    stats_parser.add_argument(
        '--metric',
        choices=['branch', 'class', 'complexity', 'instruction', 'line', 'method'],
        required=True,
        help='Metric type.',
    )
    stats_parser.add_argument(
        '--aggregation',
        choices=['coverage', 'missed'],
        required=True,
        help='Aggregation type.',
    )

    summary = subparsers.add_parser('summary', help='Prints the summarize of the coverage')
    summary.add_argument('file', help='File with report')
    summary.add_argument(
        '--json', help='File to save the result of coverage in JSON format to.'
    )

    verify_parser = subparsers.add_parser(
        'verify',
        help='Verifies, if results of minimal coverage requirements were met.',
    )
    verify_parser.add_argument('file', help='File with report')
    verify_parser.add_argument(
        '--branch',
        help='Verifies branches coverage. Number describes maximum allowed of non-covered branches, and value with % sign, minimum allowed coverage percentage value.',
    )
    verify_parser.add_argument(
        '--class',
        help='Verifies class coverage. Number describes maximum allowed of non-covered classes, and value with % sign, minimum allowed coverage percentage value.',
    )
    verify_parser.add_argument(
        '--complexity',
        help='Verifies complexity coverage. Number describes maximum allowed complexity, and with % sign, minimum allowed coverage percentage value.',
    )
    verify_parser.add_argument(
        '--instruction',
        help='Verifies instruction coverage. Number describes maximum allowed of non-covered instructions, and with % sign, minimum allowed coverage percentage value.',
    )
    verify_parser.add_argument(
        '--line',
        help='Verifies lines coverage. Number describes maximum allowed of non-covered lines, and with % sign, minimum allowed coverage percentage value.',
    )
    verify_parser.add_argument(
        '--method',
        help='Verifies method coverage. Number describes maximum allowed of non-covered method, and with % sign, minimum allowed coverage percentage value.',
    )
    return parser.parse_args()


def merge(files: list[str], out_file: str):
    report = ET.Element('report', attrib={'name': 'ci'})
    ET.SubElement(
        report,
        'sessioninfo',
        attrib={'id': '6dcbfcb5', 'start': '1698326477197', 'end': '1698326546886'},
    )
    for file in files:
        append(report, file)

    stats: dict = defaultdict(lambda: {'missed': 0, 'covered': 0})
    for counter in report.findall('./group/counter'):
        counter_stats = stats[counter.attrib['type']]
        for key in counter_stats:
            counter_stats[key] += int(counter.attrib[key])

    for counter_type, counters in stats.items():
        ET.SubElement(
            report,
            'counter',
            {'type': counter_type, **{k: str(v) for k, v in counters.items()}},
        )

    with open(out_file, 'wb') as fp:
        fp.write(ET.tostring(report, 'utf8'))


def append(report: ET.Element, file: str):
    subreport = ET.parse(file)
    subreport_root = subreport.getroot()
    group = ET.SubElement(
        report, 'group', attrib={'name': subreport_root.attrib['name']}
    )
    for node in subreport_root.findall('./*'):
        if node.tag != 'sessioninfo':
            group.append(node)


def print_summary(file: str, json_file: str | None):
    report = ET.parse(file).getroot()
    data = {}
    for counter in report.findall('./counter'):
        missed = int(counter.attrib['missed'])
        covered = int(counter.attrib['covered'])
        coverage = coverage_formula(missed, covered)
        metric = counter.attrib['type'].lower()
        translated_metric = METRICS_TRANS[metric]
        data[metric] = {
            'missed': missed,
            'covered': covered,
            'coverage': coverage,
        }
        print(
            f'{translated_metric}: non-covered={missed}, covered={covered}, percentage covered={coverage}%'
        )
    data['total'] = data['instruction']
    total_coverage = round(data['total']['coverage'])
    print(f'Total coverage: {total_coverage}%')
    if json_file is not None:
        with open(json_file, 'w', encoding='utf8') as fp:
            json.dump({'coverage': data}, fp, ensure_ascii=False)


def print_stats(file: str, metric: str, aggregation: str):
    report = ET.parse(file).getroot()
    counter = report.find(f'./counter[@type="{metric.upper()}"]')
    assert counter is not None
    missed = int(counter.attrib['missed'])
    if aggregation == 'missed':
        print(missed)
    elif aggregation == 'coverage':
        print(counter_coverage(counter))


def verify(args: Namespace):
    report = ET.parse(args.file).getroot()
    counters = {
        counter.attrib['type'].lower(): counter
        for counter in report.findall('./counter')
    }
    errors = []
    for metric in COV_METRICS:
        if required := getattr(args, metric):
            if error := verify_error(metric, counters[metric], required):
                errors.append(error)
    if errors:
        print('\n'.join(errors))
        sys.exit(1)


def verify_error(metric: str, counter: ET.Element, required: str) -> str | None:
    if required.endswith('%'):
        required_num = int(required[:-1])
        actual = round(counter_coverage(counter))
        if actual < required_num:
            return MESSAGES_COV[metric].format(actual=actual, required=required_num)
    else:
        actual = int(counter.attrib['missed'])
        if actual > int(required):
            return MESSAGES_MIN[metric].format(actual=actual, required=required)
    return None


def coverage_formula(missed: int, covered: int) -> float:
    return round(covered / (covered + missed) * 100, 2)


def counter_coverage(counter: ET.Element) -> float:
    missed = int(counter.attrib['missed'])
    covered = int(counter.attrib['covered'])
    return coverage_formula(missed, covered)


def main():
    args = cli()
    command = args.command
    if command == 'merge':
        files = args.files
        if len(files) == 1:
            shutil.copy(files[0], args.out)
            sys.exit(0)
        merge(files, args.out)
    elif command == 'summary':
        print_summary(args.file, args.json)
    elif command == 'stats':
        print_stats(args.file, args.metric, args.aggregation)
    elif command == 'verify':
        verify(args)


if __name__ == '__main__':
    main()
